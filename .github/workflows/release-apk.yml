name: Build & Release APK + Sheet webhook (minimal)

on:
  push:
    tags: ['v*']
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Gradle cache
        uses: gradle/gradle-build-action@v3
        with:
          cache-read-only: true
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 1) Keystore'u runner'a yaz
      - name: Write signing keystore
        run: |
          test -n "${{ secrets.SIGNING_KEYSTORE_B64 }}" || { echo "SIGNING_KEYSTORE_B64 empty"; exit 1; }
          echo "${{ secrets.SIGNING_KEYSTORE_B64 }}" | base64 -d > app/moneyapp-shared-debug.jks
          ls -l app/moneyapp-shared-debug.jks

      # 2) İmzalı debug APK
      - name: Build debug APK
        env:
          SIGNING_STORE_FILE: moneyapp-shared-debug.jks
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        run: ./gradlew -q :app:assembleDebug

      - name: Locate APK
        id: apk
        shell: bash
        run: |
          set -euo pipefail
          APK_PATH=$(ls app/build/outputs/apk/debug/*.apk | head -n1)
          [[ -n "$APK_PATH" ]]
          TAG="${GITHUB_REF_NAME:-dev}"
          APK_NAME="MoneyAppAndroid-${TAG}-debug.apk"
          cp "$APK_PATH" "$APK_NAME"
          echo "apk_name=$APK_NAME" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release & upload asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.apk.outputs.apk_name }}
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Build APK public URL
        id: url
        run: |
          TAG="${GITHUB_REF_NAME:-dev}"
          NAME="${{ steps.apk.outputs.apk_name }}"
          echo "apk_url=https://github.com/${{ github.repository }}/releases/download/${TAG}/${NAME}" >> "$GITHUB_OUTPUT"

      - name: Read version from Gradle
        id: ver
        run: |
          OUT=$(./gradlew -q :app:printVersionInfo)
          echo "$OUT"
          VC=$(echo "$OUT" | sed -n 's/^VERSION_CODE=\(.*\)$/\1/p')
          VN=$(echo "$OUT" | sed -n 's/^VERSION_NAME=\(.*\)$/\1/p')
          echo "version_code=$VC" >> "$GITHUB_OUTPUT"
          echo "version_name=$VN" >> "$GITHUB_OUTPUT"

      - name: POST to Google Sheets webhook
        run: |
          WEBAPP="https://script.google.com/macros/s/AKfycby8G4L4UhT2lutb1jyV8n8fX99_tIxsdDSGCdIt1ONHObpCLI51_tHQ-PBeT4mdpcrX/exec"
          VC="${{ steps.ver.outputs.version_code }}"
          VN="${{ steps.ver.outputs.version_name }}"
          APK_URL="${{ steps.url.outputs.apk_url }}"
          JSON=$(printf '{"version_code":%s,"versionCode":%s,"version_name":"%s","versionName":"%s","apkUrl":"%s","asset_url":"%s"}' "$VC" "$VC" "$VN" "$VN" "$APK_URL" "$APK_URL")
          echo "$JSON"
          curl -sS -L -H "Content-Type: application/json" -d "$JSON" "$WEBAPP"
